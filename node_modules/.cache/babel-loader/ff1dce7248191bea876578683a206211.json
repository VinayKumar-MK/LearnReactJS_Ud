{"ast":null,"code":"import { EventEmitter, UnavailabilityError } from '@unimodules/core';\nimport { useEffect } from 'react';\nimport ExpoScreenCapture from './ExpoScreenCapture';\nconst activeTags = new Set();\nconst emitter = new EventEmitter(ExpoScreenCapture);\nconst onScreenshotEventName = 'onScreenshot';\n/**\n * Returns whether the Screen Capture API is available on the current device.\n *\n * @returns Async `boolean`, indicating whether the Screen Capture API is available on the current device. Currently this resolves `true` on iOS and Android only.\n */\n\nexport async function isAvailableAsync() {\n  return !!ExpoScreenCapture.preventScreenCapture && !!ExpoScreenCapture.allowScreenCapture;\n}\n/**\n * Prevents screenshots and screen recordings. If you are\n * already preventing screen capture, this method does nothing.\n *\n * On iOS, this will only prevent screen recordings, and is only\n * available on iOS 11 and newer. On older iOS versions, this method\n * does nothing.\n *\n * @param key Optional. This will prevent multiple instances of the\n * preventScreenCaptureAsync and allowScreenCaptureAsync methods\n * from conflicting with each other. If provided, you will need to call\n * allowScreenCaptureAsync with the same key in order to re-enable\n * screen capturing. Defaults to 'default'.\n *\n * @example\n * ```typescript\n * preventScreenCaptureAsync();\n * ```\n */\n\nexport async function preventScreenCaptureAsync(key = 'default') {\n  if (!ExpoScreenCapture.preventScreenCapture) {\n    throw new UnavailabilityError('ScreenCapture', 'preventScreenCaptureAsync');\n  }\n\n  if (!activeTags.has(key)) {\n    activeTags.add(key);\n    await ExpoScreenCapture.preventScreenCapture();\n  }\n}\n/**\n * Reallows screenshots and recordings. If you haven't called\n * `preventScreenCapture()` yet, this method does nothing.\n *\n * @param key Optional. This will prevent multiple instances of the\n * preventScreenCaptureAsync and allowScreenCaptureAsync methods\n * from conflicting with each other. If provided, must be the same as the key\n * passed to preventScreenCaptureAsync in order to re-enable\n * screen capturing. Defaults to 'default'.\n *\n * @example\n * ```typescript\n * allowScreenCaptureAsync();\n * ```\n */\n\nexport async function allowScreenCaptureAsync(key = 'default') {\n  if (!ExpoScreenCapture.preventScreenCapture) {\n    throw new UnavailabilityError('ScreenCapture', 'allowScreenCaptureAsync');\n  }\n\n  activeTags.delete(key);\n\n  if (activeTags.size === 0) {\n    await ExpoScreenCapture.allowScreenCapture();\n  }\n}\n/**\n * React hook for preventing screenshots and screen recordings\n * while the component is mounted.\n *\n * @param key Optional. If provided, this will prevent multiple instances of\n * this hook or the preventScreenCaptureAsync and allowScreenCaptureAsync\n * methods from conflicting with each other. Defaults to 'default'.\n *\n * @example\n * ```typescript\n * usePreventScreenCapture();\n * ```\n */\n\nexport function usePreventScreenCapture(key = 'default') {\n  useEffect(() => {\n    preventScreenCaptureAsync(key);\n    return () => {\n      allowScreenCaptureAsync(key);\n    };\n  }, [key]);\n}\n/**\n * Adds a listener that will fire whenever the user takes a screenshot.\n *\n * @param listener Callback executed when a screenshot occurs.\n *\n * @example\n * ```typescript\n * addScreenshotListener(() => {\n *   alert('Screenshots are fun!');\n * });\n * ```\n */\n\nexport function addScreenshotListener(listener) {\n  return emitter.addListener(onScreenshotEventName, listener);\n}\n/**\n * Removes the listener added by addScreenshotListener\n *\n * @param subscription The subscription to remove (created by addScreenshotListener).\n *\n * @example\n * ```typescript\n * const subscription = addScreenshotListener(() => {\n *   alert('Screenshots are fun!');\n * });\n * removeScreenshotListener(subscription);\n * ```\n */\n\nexport function removeScreenshotListener(subscription) {\n  emitter.removeSubscription(subscription);\n}","map":{"version":3,"sources":["../src/ScreenCapture.ts"],"names":[],"mappings":"AAAA,SAAS,YAAT,EAAqC,mBAArC,QAAgE,kBAAhE;AACA,SAAS,SAAT,QAA0B,OAA1B;AAEA,OAAO,iBAAP,MAA8B,qBAA9B;AAEA,MAAM,UAAU,GAAgB,IAAI,GAAJ,EAAhC;AACA,MAAM,OAAO,GAAG,IAAI,YAAJ,CAAiB,iBAAjB,CAAhB;AAEA,MAAM,qBAAqB,GAAG,cAA9B;AAEA;;;;AAIG;;AACH,OAAO,eAAe,gBAAf,GAA+B;AACpC,SAAO,CAAC,CAAC,iBAAiB,CAAC,oBAApB,IAA4C,CAAC,CAAC,iBAAiB,CAAC,kBAAvE;AACD;AAED;;;;;;;;;;;;;;;;;;AAkBG;;AACH,OAAO,eAAe,yBAAf,CAAyC,GAAA,GAAc,SAAvD,EAAgE;AACrE,MAAI,CAAC,iBAAiB,CAAC,oBAAvB,EAA6C;AAC3C,UAAM,IAAI,mBAAJ,CAAwB,eAAxB,EAAyC,2BAAzC,CAAN;AACD;;AAED,MAAI,CAAC,UAAU,CAAC,GAAX,CAAe,GAAf,CAAL,EAA0B;AACxB,IAAA,UAAU,CAAC,GAAX,CAAe,GAAf;AACA,UAAM,iBAAiB,CAAC,oBAAlB,EAAN;AACD;AACF;AAED;;;;;;;;;;;;;;AAcG;;AACH,OAAO,eAAe,uBAAf,CAAuC,GAAA,GAAc,SAArD,EAA8D;AACnE,MAAI,CAAC,iBAAiB,CAAC,oBAAvB,EAA6C;AAC3C,UAAM,IAAI,mBAAJ,CAAwB,eAAxB,EAAyC,yBAAzC,CAAN;AACD;;AAED,EAAA,UAAU,CAAC,MAAX,CAAkB,GAAlB;;AACA,MAAI,UAAU,CAAC,IAAX,KAAoB,CAAxB,EAA2B;AACzB,UAAM,iBAAiB,CAAC,kBAAlB,EAAN;AACD;AACF;AAED;;;;;;;;;;;;AAYG;;AACH,OAAM,SAAU,uBAAV,CAAkC,GAAA,GAAc,SAAhD,EAAyD;AAC7D,EAAA,SAAS,CAAC,MAAK;AACb,IAAA,yBAAyB,CAAC,GAAD,CAAzB;AAEA,WAAO,MAAK;AACV,MAAA,uBAAuB,CAAC,GAAD,CAAvB;AACD,KAFD;AAGD,GANQ,EAMN,CAAC,GAAD,CANM,CAAT;AAOD;AAED;;;;;;;;;;;AAWG;;AACH,OAAM,SAAU,qBAAV,CAAgC,QAAhC,EAAoD;AACxD,SAAO,OAAO,CAAC,WAAR,CAA0B,qBAA1B,EAAiD,QAAjD,CAAP;AACD;AAED;;;;;;;;;;;;AAYG;;AACH,OAAM,SAAU,wBAAV,CAAmC,YAAnC,EAA6D;AACjE,EAAA,OAAO,CAAC,kBAAR,CAA2B,YAA3B;AACD","sourcesContent":["import { EventEmitter, Subscription, UnavailabilityError } from '@unimodules/core';\nimport { useEffect } from 'react';\n\nimport ExpoScreenCapture from './ExpoScreenCapture';\n\nconst activeTags: Set<string> = new Set();\nconst emitter = new EventEmitter(ExpoScreenCapture);\n\nconst onScreenshotEventName = 'onScreenshot';\n\n/**\n * Returns whether the Screen Capture API is available on the current device.\n *\n * @returns Async `boolean`, indicating whether the Screen Capture API is available on the current device. Currently this resolves `true` on iOS and Android only.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return !!ExpoScreenCapture.preventScreenCapture && !!ExpoScreenCapture.allowScreenCapture;\n}\n\n/**\n * Prevents screenshots and screen recordings. If you are\n * already preventing screen capture, this method does nothing.\n *\n * On iOS, this will only prevent screen recordings, and is only\n * available on iOS 11 and newer. On older iOS versions, this method\n * does nothing.\n *\n * @param key Optional. This will prevent multiple instances of the\n * preventScreenCaptureAsync and allowScreenCaptureAsync methods\n * from conflicting with each other. If provided, you will need to call\n * allowScreenCaptureAsync with the same key in order to re-enable\n * screen capturing. Defaults to 'default'.\n *\n * @example\n * ```typescript\n * preventScreenCaptureAsync();\n * ```\n */\nexport async function preventScreenCaptureAsync(key: string = 'default'): Promise<void> {\n  if (!ExpoScreenCapture.preventScreenCapture) {\n    throw new UnavailabilityError('ScreenCapture', 'preventScreenCaptureAsync');\n  }\n\n  if (!activeTags.has(key)) {\n    activeTags.add(key);\n    await ExpoScreenCapture.preventScreenCapture();\n  }\n}\n\n/**\n * Reallows screenshots and recordings. If you haven't called\n * `preventScreenCapture()` yet, this method does nothing.\n *\n * @param key Optional. This will prevent multiple instances of the\n * preventScreenCaptureAsync and allowScreenCaptureAsync methods\n * from conflicting with each other. If provided, must be the same as the key\n * passed to preventScreenCaptureAsync in order to re-enable\n * screen capturing. Defaults to 'default'.\n *\n * @example\n * ```typescript\n * allowScreenCaptureAsync();\n * ```\n */\nexport async function allowScreenCaptureAsync(key: string = 'default'): Promise<void> {\n  if (!ExpoScreenCapture.preventScreenCapture) {\n    throw new UnavailabilityError('ScreenCapture', 'allowScreenCaptureAsync');\n  }\n\n  activeTags.delete(key);\n  if (activeTags.size === 0) {\n    await ExpoScreenCapture.allowScreenCapture();\n  }\n}\n\n/**\n * React hook for preventing screenshots and screen recordings\n * while the component is mounted.\n *\n * @param key Optional. If provided, this will prevent multiple instances of\n * this hook or the preventScreenCaptureAsync and allowScreenCaptureAsync\n * methods from conflicting with each other. Defaults to 'default'.\n *\n * @example\n * ```typescript\n * usePreventScreenCapture();\n * ```\n */\nexport function usePreventScreenCapture(key: string = 'default'): void {\n  useEffect(() => {\n    preventScreenCaptureAsync(key);\n\n    return () => {\n      allowScreenCaptureAsync(key);\n    };\n  }, [key]);\n}\n\n/**\n * Adds a listener that will fire whenever the user takes a screenshot.\n *\n * @param listener Callback executed when a screenshot occurs.\n *\n * @example\n * ```typescript\n * addScreenshotListener(() => {\n *   alert('Screenshots are fun!');\n * });\n * ```\n */\nexport function addScreenshotListener(listener: () => void): Subscription {\n  return emitter.addListener<void>(onScreenshotEventName, listener);\n}\n\n/**\n * Removes the listener added by addScreenshotListener\n *\n * @param subscription The subscription to remove (created by addScreenshotListener).\n *\n * @example\n * ```typescript\n * const subscription = addScreenshotListener(() => {\n *   alert('Screenshots are fun!');\n * });\n * removeScreenshotListener(subscription);\n * ```\n */\nexport function removeScreenshotListener(subscription: Subscription) {\n  emitter.removeSubscription(subscription);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}